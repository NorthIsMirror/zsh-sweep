#!/usr/bin/env zsh
# Copyright (c) 2023 Sebastian Gniazdowski

# Recognize and save info on run as `#!/usr/bin/env zsh` script
[[ $0 != zscan || -n $ZSH_SCRIPT ]]&&integer bescript=1

# Set options
builtin emulate -L zsh -o extendedglob -o noshortloops \
            -o warncreateglobal -o typesetsilent -o nopromptsubst

# $0 support
0=${${(M)${0::=${(%):-%x}}:#/*}:-$PWD/$0}

# Load initialization script
source "$0:h:h"/libexec/zs::global-init.zsh

# -v verbose
# -G no cd, absolute paths
# -s select visually
# -# offset of the picked °feature° when multiple match
# -l show files in the °feature°
local -A Opts QData
builtin zparseopts ${${(M)ZSH_VERSION:#(5.[8-9]|6.[0-9])}:+-F} -D -E -A Opts -- v -func -script C:||return 7

if (($+Opts[-h]||$+Opts[--help]));then
    local nl=$'\n'
    tigmsg %B{33}zscan%b -vGghl\# %B{41}\<°feature-ID°\>$nl\
    return 0
fi

# Automatic -C value
: ${Opts[-C]:=$PWD}

# Get work directory path
local WDIR=$Opts[-C]
# Also set the user data hash QData
: ${QData[workdir]::=$WDIR}

if [[ ! -d $WDIR ]];then
    zsmsg -h {err}Error: The path {path}$WDIR{err} \
        isn\'t a directory
fi

# Establish text editor
util/zs::get-editor||return 1
: ${QData[editor]::=$REPLY}

local IN=$1 QED=$REPLY Q QE
: ${QData[file-name]::=$IN:t}

if [[ ! -r $WDIR/$IN ]];then
    zsmsg -h {err}Error:{txt} input file \
        {quot}\"{file}$IN{quot}\"{txt} doesn\'t exist
    return 1
fi

util/zs::read-file $IN normal||return 1
local -a content=("$reply[@]") checks out match_array
local -A ErrMap
integer RET

checks=(${=$(<$ZSDIR/checks.dat)})
eval ErrMap=\(${=$(<$ZSDIR/errmap.dat)}\)
(($+Opts[--func]))&&checks=(${checks:#script:*})
(($+Opts[--script]))&&checks=(${checks:#func:*})

for Q ($checks);do
    local QC=${Q#(script|func):}
    local QT=both
    [[ $Q == script:* ]]&&QT=script\ 
    [[ $Q == func:* ]]&&QT=function\ 

    zsmsg -h {note}Notice:%b running {type}${QT:#both}{note}check: \
        {chk}$QC{warn}%b…

    # Check is loaded properly?
    if ! checks/zs::verify-check "$QC";then
        zserr Couldn\'t find data of check {data}$QC{txt}, check installation
        continue
    fi

    #
    # Main check exec code
    #
    repeat 1 {noglob checks/zs::run-check "$QC" content match_array;RET=$?;}
    out=($reply)

    if ((RET));then
        for QE ($out);do
            if ! util/zs::get-txt "$QE";then
                zserr Couldn\'t found warning text of num. \
                    {quot}\#{num}$QE
            else
                eval REPLY=\"$REPLY\"
                zswarn -h ${(Q)REPLY}
            fi
        done
    fi
done
