#!/usr/bin/env zsh
# Copyright (c) 2023 Sebastian Gniazdowski
#
# xzmap – extras function – map function/command to array
#

zsfilt() {

# Run as script?
integer bescript=${${0:#zsfilt}:+1}

# Set options
builtin emulate -L zsh -o extendedglob -o noshortloops \
                        -o warncreateglobal -o typesetsilent \
                        -o nopromptsubst

# Set $0 with a new trik - use of %x prompt expansion
0=${${(M)${0::=${(%):-%x}}:#/*}:-$PWD/$0}

typeset -gA Plugins
# Source init script
source "$0:h:h"/libexec/zs::global-init.zsh

# Cleanup on exit
trap "unset -f zs-filter ZSIO" EXIT
trap "unset -f zs-filter ZSIO;return 1" INT

# Input/options
local -A Opts
builtin zparseopts ${${(M)ZSH_VERSION:#(5.[8-9]|6.[0-9])}:+-F} -D -E -A Opts -- -fr z o v:||return 1

set -- "${@:#--}"
# Force output mode when script
((bescript))&&Opts[-o]=

# Get runnable or pattern to match
local PAT_OR_RUN=$1 MARR_VAR=$Opts[-v]
shift

# Is there any pattern or runnable to apply?
if [[ -z $PAT_OR_RUN ]];then
    zsmsg -e -h {err}Warning:{txt} No condition object, passing through
    return 1
fi

# Does runnable exist?
if (($+Opts[--fr]))&&! type $PAT_OR_RUN ZSIO; then
    zsmsg -h {err}Error:{txt} Couldn\'t find runnable: {cmd}$PAT_OR_RUN
    return 3
fi

# Is there any input?
if (($# <= 0));then
    zsmsg -h {err}Error:{txt} Missing arguments: the objects \
        to apply ·{cmd}$PAT_OR_RUN{txt}· on
    return 1
fi

# Initialize vars
REPLY= reply=()
local QE QECODES O
integer QRET QOPT_GFLAG QHAVE_OUTPUT QOPTIONAL=${${(M)PAT_OR_RUN##\!}:+1}
local PAT_OR_RUN=${PAT_OR_RUN#\!}
# Get the transported text from global alias
local QUNWIND=${galiases[$PAT_OR_RUN]##(!|)<->##:} \
        QCONDITON=${(M)galiases[$PAT_OR_RUN]##(!|)<->##}

zs-filter()
{
    local QT=$1 PAT_OR_RUN=$2 INPUT=$3 MARR_VAR=$4
    local -a match=() mbegin=() mend=()
    integer RET
    if [[ $QT == 1 ]];then
        "$PAT_OR_RUN" "$INPUT" ZSIO
        RET=$?
    else
        # Prepare match vars
        match=() mbegin=() mend=()
        eval "INPUT=\${(S)INPUT//#%(#b)(#i)($QUNWIND)/°match°}"
        if [[ $INPUT == °match° && -n $QCONDITON ]];then
            if [[ $QCONDITON == \!* ]];then
                [[ -z $match[${QCONDITON#\!}] ]]
                RET=$?
           else
                [[ -n $match[$QCONDITON] ]]
                RET=$?
           fi
            # Optional matching makes sense only for …:QCON:… condition,
            # so set the QOPT_FLAG only in this if-branch.
            # QOPT_GFLAG equal to 1 means: the pattern matched, but
            # QCONDITON didn't hold, so return false even if there has
            # been °match° in the string. It's basically a second-stage
            # check – the QCONDITON must hold here
            QOPT_GFLAG+=RET
            # Save the matched line regardless of the QCONDITON result
            RET=0
            # Save catched up parens if no previous bad result occurred
            [[ -n $MARR_VAR || $QOPT_GFLAG -eq 0 ]]&& \
                : ${(AP@)MARR_VAR::="$match[@]"}
        elif [[ $INPUT == °match° ]];then
            RET=0
        else
            RET=1
        fi
    fi
    return RET
}

if [[ -z ${PAT_OR_RUN#\!} ]]|| \
    {! checks/zs::verify-check "$PAT_OR_RUN"&&((!$+Opts[--fr]));}
then
    zswarn Check {data}$PAT_OR_RUN{txt} couldn\'t be found
    return 0
fi

for QE; do
        if zs-filter $+Opts[--fr] "$PAT_OR_RUN" "$QE" "$MARR_VAR";then
            QECODES+=0
            (($+Opts[-o]))&&builtin print -r -- "$QE"||reply+=("$QE")
        else
            QRET=$?
            (($+Opts[-z]))&&QECODES+=$((QRET%10))
            # Meaning: output only when -z
            if (($+Opts[-o]&&$+Opts[-z]));then
                builtin print
            elif (($+Opts[-z]));then
                reply+=("")
            fi
        fi
done
REPLY=$QECODES

# At least 1 zero code exists?
[[ $REPLY != <1-9># ]]&&QHAVE_OUTPUT=1||QHAVE_OUTPUT=QOPTIONAL

# If run as script, then output status string via stdout
(((QHAVE_OUTPUT||$+Opts[-z])&&$+Opts[-o]))&&builtin print -r -- $REPLY

# Force false result if GFLAG is set
QRET=QOPT_GFLAG?1:1-QHAVE_OUTPUT
return QRET
}